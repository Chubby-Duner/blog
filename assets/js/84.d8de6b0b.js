(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{546:function(e,t,a){"use strict";a.r(t);var r=a(14),v=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"react17新版本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react17新版本概念"}},[e._v("#")]),e._v(" React17新版本概念")]),e._v(" "),a("p",[e._v("React17.0新特性(与3年前的16版本相比没有新特性）虽然没有新功能，但是具有战略意义")]),e._v(" "),a("ul",[a("li",[e._v("17概念1、替换了底层的代码，向下兼容、同时甩掉了历史的包袱。")]),e._v(" "),a("li",[e._v("17概念2、没有代码的断层，给未来留下了足够的升级空间")]),e._v(" "),a("li",[e._v("17概念3、react17支持渐进式的升级(逐步升级)方案，在17以前是不支持两个版本混搭的，但是在17以后可以采取逐步升级，允许多个版本共存")])]),e._v(" "),a("p",[e._v("比如（我们可以先升级路由系统，再升级弹窗，这样平滑的过渡到最新的版本）")]),e._v(" "),a("h1",{attrs:{id:"breaking-changes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#breaking-changes"}},[e._v("#")]),e._v(" Breaking Changes")]),e._v(" "),a("ol",[a("li",[e._v("事件委托机制的改变")]),e._v(" "),a("li",[e._v("向原生浏览器靠拢")]),e._v(" "),a("li",[e._v("删除事件池")]),e._v(" "),a("li",[e._v("hooks的副作用 useEffect清理操作从同步操作改为了异步操作（useEffect本身是异步操作，但是在过去的版本中，它的清理操作是同步的，这种不统一，导致UI的渲染效率慢），所以在17中，改为了异步操作，React会马上释放资源，不会产生UI阻塞的问题了")]),e._v(" "),a("li",[e._v("JSX不可返回undefined（在17以后，render函数必须是有明确的返回对象的，这个修订的初衷是为了防止程序员在开发的时候，忘记写render）")]),e._v(" "),a("li",[e._v("删除部分私有的API")])]),e._v(" "),a("h1",{attrs:{id:"react未来展望"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react未来展望"}},[e._v("#")]),e._v(" React未来展望")]),e._v(" "),a("ol",[a("li",[e._v("React  v17 并不是过渡版本，而是承上启下的战略版本")]),e._v(" "),a("li",[e._v("未来将会更加强调函数式组件")]),e._v(" "),a("li",[e._v("支持微前端架构")])])])}),[],!1,null,null,null);t.default=v.exports}}]);